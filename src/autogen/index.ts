// THIS FILE IS AUTOMATICALLY GENERATED BY SPACETIMEDB. EDITS TO THIS FILE
// WILL NOT BE SAVED. MODIFY TABLES IN YOUR MODULE SOURCE CODE INSTEAD.

/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
import {
  AlgebraicType,
  AlgebraicValue,
  BinaryReader,
  BinaryWriter,
  CallReducerFlags,
  ConnectionId,
  DbConnectionBuilder,
  DbConnectionImpl,
  DbContext,
  ErrorContextInterface,
  Event,
  EventContextInterface,
  Identity,
  ProductType,
  ProductTypeElement,
  ReducerEventContextInterface,
  SubscriptionBuilderImpl,
  SubscriptionEventContextInterface,
  SumType,
  SumTypeVariant,
  TableCache,
  TimeDuration,
  Timestamp,
  deepEqual,
} from "@clockworklabs/spacetimedb-sdk";

// Import and reexport all reducer arg types
import { ChangePassword } from "./change_password_reducer.ts";
export { ChangePassword };
import { ClientConnected } from "./client_connected_reducer.ts";
export { ClientConnected };
import { ClientDisconnected } from "./client_disconnected_reducer.ts";
export { ClientDisconnected };
import { CloneComponent } from "./clone_component_reducer.ts";
export { CloneComponent };
import { CopyUserSettings } from "./copy_user_settings_reducer.ts";
export { CopyUserSettings };
import { CreateComponent } from "./create_component_reducer.ts";
export { CreateComponent };
import { CreateProject } from "./create_project_reducer.ts";
export { CreateProject };
import { DeactivateUser } from "./deactivate_user_reducer.ts";
export { DeactivateUser };
import { DeleteAllUserSettings } from "./delete_all_user_settings_reducer.ts";
export { DeleteAllUserSettings };
import { DeleteComponentById } from "./delete_component_by_id_reducer.ts";
export { DeleteComponentById };
import { DeleteProject } from "./delete_project_reducer.ts";
export { DeleteProject };
import { DeleteSetting } from "./delete_setting_reducer.ts";
export { DeleteSetting };
import { IncrementComponentUsage } from "./increment_component_usage_reducer.ts";
export { IncrementComponentUsage };
import { LoginUser } from "./login_user_reducer.ts";
export { LoginUser };
import { RegisterUser } from "./register_user_reducer.ts";
export { RegisterUser };
import { RemoveUserFromProject } from "./remove_user_from_project_reducer.ts";
export { RemoveUserFromProject };
import { SetSetting } from "./set_setting_reducer.ts";
export { SetSetting };
import { ShareProject } from "./share_project_reducer.ts";
export { ShareProject };
import { UpdateComponent } from "./update_component_reducer.ts";
export { UpdateComponent };
import { UpdateLastProjectAccess } from "./update_last_project_access_reducer.ts";
export { UpdateLastProjectAccess };
import { UpdateProject } from "./update_project_reducer.ts";
export { UpdateProject };
import { UpdateUserProfile } from "./update_user_profile_reducer.ts";
export { UpdateUserProfile };

// Import and reexport all table handle types
import { ComponentTableHandle } from "./component_table.ts";
export { ComponentTableHandle };
import { ProjectTableHandle } from "./project_table.ts";
export { ProjectTableHandle };
import { SettingTableHandle } from "./setting_table.ts";
export { SettingTableHandle };
import { UserTableHandle } from "./user_table.ts";
export { UserTableHandle };
import { UserProjectTableHandle } from "./user_project_table.ts";
export { UserProjectTableHandle };

// Import and reexport all types
import { Component } from "./component_type.ts";
export { Component };
import { Project } from "./project_type.ts";
export { Project };
import { Setting } from "./setting_type.ts";
export { Setting };
import { User } from "./user_type.ts";
export { User };
import { UserProject } from "./user_project_type.ts";
export { UserProject };

const REMOTE_MODULE = {
  tables: {
    Component: {
      tableName: "Component",
      rowType: Component.getTypeScriptAlgebraicType(),
      primaryKey: "id",
    },
    Project: {
      tableName: "Project",
      rowType: Project.getTypeScriptAlgebraicType(),
      primaryKey: "id",
    },
    Setting: {
      tableName: "Setting",
      rowType: Setting.getTypeScriptAlgebraicType(),
      primaryKey: "id",
    },
    User: {
      tableName: "User",
      rowType: User.getTypeScriptAlgebraicType(),
      primaryKey: "id",
    },
    UserProject: {
      tableName: "UserProject",
      rowType: UserProject.getTypeScriptAlgebraicType(),
      primaryKey: "id",
    },
  },
  reducers: {
    ChangePassword: {
      reducerName: "ChangePassword",
      argsType: ChangePassword.getTypeScriptAlgebraicType(),
    },
    ClientConnected: {
      reducerName: "ClientConnected",
      argsType: ClientConnected.getTypeScriptAlgebraicType(),
    },
    ClientDisconnected: {
      reducerName: "ClientDisconnected",
      argsType: ClientDisconnected.getTypeScriptAlgebraicType(),
    },
    CloneComponent: {
      reducerName: "CloneComponent",
      argsType: CloneComponent.getTypeScriptAlgebraicType(),
    },
    CopyUserSettings: {
      reducerName: "CopyUserSettings",
      argsType: CopyUserSettings.getTypeScriptAlgebraicType(),
    },
    CreateComponent: {
      reducerName: "CreateComponent",
      argsType: CreateComponent.getTypeScriptAlgebraicType(),
    },
    CreateProject: {
      reducerName: "CreateProject",
      argsType: CreateProject.getTypeScriptAlgebraicType(),
    },
    DeactivateUser: {
      reducerName: "DeactivateUser",
      argsType: DeactivateUser.getTypeScriptAlgebraicType(),
    },
    DeleteAllUserSettings: {
      reducerName: "DeleteAllUserSettings",
      argsType: DeleteAllUserSettings.getTypeScriptAlgebraicType(),
    },
    DeleteComponentById: {
      reducerName: "DeleteComponentById",
      argsType: DeleteComponentById.getTypeScriptAlgebraicType(),
    },
    DeleteProject: {
      reducerName: "DeleteProject",
      argsType: DeleteProject.getTypeScriptAlgebraicType(),
    },
    DeleteSetting: {
      reducerName: "DeleteSetting",
      argsType: DeleteSetting.getTypeScriptAlgebraicType(),
    },
    IncrementComponentUsage: {
      reducerName: "IncrementComponentUsage",
      argsType: IncrementComponentUsage.getTypeScriptAlgebraicType(),
    },
    LoginUser: {
      reducerName: "LoginUser",
      argsType: LoginUser.getTypeScriptAlgebraicType(),
    },
    RegisterUser: {
      reducerName: "RegisterUser",
      argsType: RegisterUser.getTypeScriptAlgebraicType(),
    },
    RemoveUserFromProject: {
      reducerName: "RemoveUserFromProject",
      argsType: RemoveUserFromProject.getTypeScriptAlgebraicType(),
    },
    SetSetting: {
      reducerName: "SetSetting",
      argsType: SetSetting.getTypeScriptAlgebraicType(),
    },
    ShareProject: {
      reducerName: "ShareProject",
      argsType: ShareProject.getTypeScriptAlgebraicType(),
    },
    UpdateComponent: {
      reducerName: "UpdateComponent",
      argsType: UpdateComponent.getTypeScriptAlgebraicType(),
    },
    UpdateLastProjectAccess: {
      reducerName: "UpdateLastProjectAccess",
      argsType: UpdateLastProjectAccess.getTypeScriptAlgebraicType(),
    },
    UpdateProject: {
      reducerName: "UpdateProject",
      argsType: UpdateProject.getTypeScriptAlgebraicType(),
    },
    UpdateUserProfile: {
      reducerName: "UpdateUserProfile",
      argsType: UpdateUserProfile.getTypeScriptAlgebraicType(),
    },
  },
  // Constructors which are used by the DbConnectionImpl to
  // extract type information from the generated RemoteModule.
  //
  // NOTE: This is not strictly necessary for `eventContextConstructor` because
  // all we do is build a TypeScript object which we could have done inside the
  // SDK, but if in the future we wanted to create a class this would be
  // necessary because classes have methods, so we'll keep it.
  eventContextConstructor: (imp: DbConnectionImpl, event: Event<Reducer>) => {
    return {
      ...(imp as DbConnection),
      event
    }
  },
  dbViewConstructor: (imp: DbConnectionImpl) => {
    return new RemoteTables(imp);
  },
  reducersConstructor: (imp: DbConnectionImpl, setReducerFlags: SetReducerFlags) => {
    return new RemoteReducers(imp, setReducerFlags);
  },
  setReducerFlagsConstructor: () => {
    return new SetReducerFlags();
  }
}

// A type representing all the possible variants of a reducer.
export type Reducer = never
| { name: "ChangePassword", args: ChangePassword }
| { name: "ClientConnected", args: ClientConnected }
| { name: "ClientDisconnected", args: ClientDisconnected }
| { name: "CloneComponent", args: CloneComponent }
| { name: "CopyUserSettings", args: CopyUserSettings }
| { name: "CreateComponent", args: CreateComponent }
| { name: "CreateProject", args: CreateProject }
| { name: "DeactivateUser", args: DeactivateUser }
| { name: "DeleteAllUserSettings", args: DeleteAllUserSettings }
| { name: "DeleteComponentById", args: DeleteComponentById }
| { name: "DeleteProject", args: DeleteProject }
| { name: "DeleteSetting", args: DeleteSetting }
| { name: "IncrementComponentUsage", args: IncrementComponentUsage }
| { name: "LoginUser", args: LoginUser }
| { name: "RegisterUser", args: RegisterUser }
| { name: "RemoveUserFromProject", args: RemoveUserFromProject }
| { name: "SetSetting", args: SetSetting }
| { name: "ShareProject", args: ShareProject }
| { name: "UpdateComponent", args: UpdateComponent }
| { name: "UpdateLastProjectAccess", args: UpdateLastProjectAccess }
| { name: "UpdateProject", args: UpdateProject }
| { name: "UpdateUserProfile", args: UpdateUserProfile }
;

export class RemoteReducers {
  constructor(private connection: DbConnectionImpl, private setCallReducerFlags: SetReducerFlags) {}

  changePassword(userId: string, currentPassword: string, newPassword: string) {
    const __args = { userId, currentPassword, newPassword };
    let __writer = new BinaryWriter(1024);
    ChangePassword.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("ChangePassword", __argsBuffer, this.setCallReducerFlags.changePasswordFlags);
  }

  onChangePassword(callback: (ctx: ReducerEventContext, userId: string, currentPassword: string, newPassword: string) => void) {
    this.connection.onReducer("ChangePassword", callback);
  }

  removeOnChangePassword(callback: (ctx: ReducerEventContext, userId: string, currentPassword: string, newPassword: string) => void) {
    this.connection.offReducer("ChangePassword", callback);
  }

  onClientConnected(callback: (ctx: ReducerEventContext) => void) {
    this.connection.onReducer("ClientConnected", callback);
  }

  removeOnClientConnected(callback: (ctx: ReducerEventContext) => void) {
    this.connection.offReducer("ClientConnected", callback);
  }

  onClientDisconnected(callback: (ctx: ReducerEventContext) => void) {
    this.connection.onReducer("ClientDisconnected", callback);
  }

  removeOnClientDisconnected(callback: (ctx: ReducerEventContext) => void) {
    this.connection.offReducer("ClientDisconnected", callback);
  }

  cloneComponent(sourceId: string, newName: string, newDescription: string, newOwnerId: string) {
    const __args = { sourceId, newName, newDescription, newOwnerId };
    let __writer = new BinaryWriter(1024);
    CloneComponent.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("CloneComponent", __argsBuffer, this.setCallReducerFlags.cloneComponentFlags);
  }

  onCloneComponent(callback: (ctx: ReducerEventContext, sourceId: string, newName: string, newDescription: string, newOwnerId: string) => void) {
    this.connection.onReducer("CloneComponent", callback);
  }

  removeOnCloneComponent(callback: (ctx: ReducerEventContext, sourceId: string, newName: string, newDescription: string, newOwnerId: string) => void) {
    this.connection.offReducer("CloneComponent", callback);
  }

  copyUserSettings(sourceUserId: string, targetUserId: string) {
    const __args = { sourceUserId, targetUserId };
    let __writer = new BinaryWriter(1024);
    CopyUserSettings.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("CopyUserSettings", __argsBuffer, this.setCallReducerFlags.copyUserSettingsFlags);
  }

  onCopyUserSettings(callback: (ctx: ReducerEventContext, sourceUserId: string, targetUserId: string) => void) {
    this.connection.onReducer("CopyUserSettings", callback);
  }

  removeOnCopyUserSettings(callback: (ctx: ReducerEventContext, sourceUserId: string, targetUserId: string) => void) {
    this.connection.offReducer("CopyUserSettings", callback);
  }

  createComponent(name: string, description: string, content: string, ownerId: string, isPublic: boolean, tags: string) {
    const __args = { name, description, content, ownerId, isPublic, tags };
    let __writer = new BinaryWriter(1024);
    CreateComponent.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("CreateComponent", __argsBuffer, this.setCallReducerFlags.createComponentFlags);
  }

  onCreateComponent(callback: (ctx: ReducerEventContext, name: string, description: string, content: string, ownerId: string, isPublic: boolean, tags: string) => void) {
    this.connection.onReducer("CreateComponent", callback);
  }

  removeOnCreateComponent(callback: (ctx: ReducerEventContext, name: string, description: string, content: string, ownerId: string, isPublic: boolean, tags: string) => void) {
    this.connection.offReducer("CreateComponent", callback);
  }

  createProject(name: string, description: string, ownerId: string, initialContent: string | undefined, isPublic: boolean, tags: string) {
    const __args = { name, description, ownerId, initialContent, isPublic, tags };
    let __writer = new BinaryWriter(1024);
    CreateProject.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("CreateProject", __argsBuffer, this.setCallReducerFlags.createProjectFlags);
  }

  onCreateProject(callback: (ctx: ReducerEventContext, name: string, description: string, ownerId: string, initialContent: string | undefined, isPublic: boolean, tags: string) => void) {
    this.connection.onReducer("CreateProject", callback);
  }

  removeOnCreateProject(callback: (ctx: ReducerEventContext, name: string, description: string, ownerId: string, initialContent: string | undefined, isPublic: boolean, tags: string) => void) {
    this.connection.offReducer("CreateProject", callback);
  }

  deactivateUser(userId: string) {
    const __args = { userId };
    let __writer = new BinaryWriter(1024);
    DeactivateUser.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("DeactivateUser", __argsBuffer, this.setCallReducerFlags.deactivateUserFlags);
  }

  onDeactivateUser(callback: (ctx: ReducerEventContext, userId: string) => void) {
    this.connection.onReducer("DeactivateUser", callback);
  }

  removeOnDeactivateUser(callback: (ctx: ReducerEventContext, userId: string) => void) {
    this.connection.offReducer("DeactivateUser", callback);
  }

  deleteAllUserSettings(userId: string) {
    const __args = { userId };
    let __writer = new BinaryWriter(1024);
    DeleteAllUserSettings.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("DeleteAllUserSettings", __argsBuffer, this.setCallReducerFlags.deleteAllUserSettingsFlags);
  }

  onDeleteAllUserSettings(callback: (ctx: ReducerEventContext, userId: string) => void) {
    this.connection.onReducer("DeleteAllUserSettings", callback);
  }

  removeOnDeleteAllUserSettings(callback: (ctx: ReducerEventContext, userId: string) => void) {
    this.connection.offReducer("DeleteAllUserSettings", callback);
  }

  deleteComponentById(id: string) {
    const __args = { id };
    let __writer = new BinaryWriter(1024);
    DeleteComponentById.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("DeleteComponentById", __argsBuffer, this.setCallReducerFlags.deleteComponentByIdFlags);
  }

  onDeleteComponentById(callback: (ctx: ReducerEventContext, id: string) => void) {
    this.connection.onReducer("DeleteComponentById", callback);
  }

  removeOnDeleteComponentById(callback: (ctx: ReducerEventContext, id: string) => void) {
    this.connection.offReducer("DeleteComponentById", callback);
  }

  deleteProject(id: string) {
    const __args = { id };
    let __writer = new BinaryWriter(1024);
    DeleteProject.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("DeleteProject", __argsBuffer, this.setCallReducerFlags.deleteProjectFlags);
  }

  onDeleteProject(callback: (ctx: ReducerEventContext, id: string) => void) {
    this.connection.onReducer("DeleteProject", callback);
  }

  removeOnDeleteProject(callback: (ctx: ReducerEventContext, id: string) => void) {
    this.connection.offReducer("DeleteProject", callback);
  }

  deleteSetting(userId: string, key: string) {
    const __args = { userId, key };
    let __writer = new BinaryWriter(1024);
    DeleteSetting.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("DeleteSetting", __argsBuffer, this.setCallReducerFlags.deleteSettingFlags);
  }

  onDeleteSetting(callback: (ctx: ReducerEventContext, userId: string, key: string) => void) {
    this.connection.onReducer("DeleteSetting", callback);
  }

  removeOnDeleteSetting(callback: (ctx: ReducerEventContext, userId: string, key: string) => void) {
    this.connection.offReducer("DeleteSetting", callback);
  }

  incrementComponentUsage(id: string) {
    const __args = { id };
    let __writer = new BinaryWriter(1024);
    IncrementComponentUsage.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("IncrementComponentUsage", __argsBuffer, this.setCallReducerFlags.incrementComponentUsageFlags);
  }

  onIncrementComponentUsage(callback: (ctx: ReducerEventContext, id: string) => void) {
    this.connection.onReducer("IncrementComponentUsage", callback);
  }

  removeOnIncrementComponentUsage(callback: (ctx: ReducerEventContext, id: string) => void) {
    this.connection.offReducer("IncrementComponentUsage", callback);
  }

  loginUser(usernameOrEmail: string, password: string) {
    const __args = { usernameOrEmail, password };
    let __writer = new BinaryWriter(1024);
    LoginUser.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("LoginUser", __argsBuffer, this.setCallReducerFlags.loginUserFlags);
  }

  onLoginUser(callback: (ctx: ReducerEventContext, usernameOrEmail: string, password: string) => void) {
    this.connection.onReducer("LoginUser", callback);
  }

  removeOnLoginUser(callback: (ctx: ReducerEventContext, usernameOrEmail: string, password: string) => void) {
    this.connection.offReducer("LoginUser", callback);
  }

  registerUser(username: string, email: string, password: string) {
    const __args = { username, email, password };
    let __writer = new BinaryWriter(1024);
    RegisterUser.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("RegisterUser", __argsBuffer, this.setCallReducerFlags.registerUserFlags);
  }

  onRegisterUser(callback: (ctx: ReducerEventContext, username: string, email: string, password: string) => void) {
    this.connection.onReducer("RegisterUser", callback);
  }

  removeOnRegisterUser(callback: (ctx: ReducerEventContext, username: string, email: string, password: string) => void) {
    this.connection.offReducer("RegisterUser", callback);
  }

  removeUserFromProject(projectId: string, userId: string) {
    const __args = { projectId, userId };
    let __writer = new BinaryWriter(1024);
    RemoveUserFromProject.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("RemoveUserFromProject", __argsBuffer, this.setCallReducerFlags.removeUserFromProjectFlags);
  }

  onRemoveUserFromProject(callback: (ctx: ReducerEventContext, projectId: string, userId: string) => void) {
    this.connection.onReducer("RemoveUserFromProject", callback);
  }

  removeOnRemoveUserFromProject(callback: (ctx: ReducerEventContext, projectId: string, userId: string) => void) {
    this.connection.offReducer("RemoveUserFromProject", callback);
  }

  setSetting(userId: string, key: string, value: string) {
    const __args = { userId, key, value };
    let __writer = new BinaryWriter(1024);
    SetSetting.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("SetSetting", __argsBuffer, this.setCallReducerFlags.setSettingFlags);
  }

  onSetSetting(callback: (ctx: ReducerEventContext, userId: string, key: string, value: string) => void) {
    this.connection.onReducer("SetSetting", callback);
  }

  removeOnSetSetting(callback: (ctx: ReducerEventContext, userId: string, key: string, value: string) => void) {
    this.connection.offReducer("SetSetting", callback);
  }

  shareProject(projectId: string, userId: string, role: string, canEdit: boolean, canShare: boolean, canDelete: boolean) {
    const __args = { projectId, userId, role, canEdit, canShare, canDelete };
    let __writer = new BinaryWriter(1024);
    ShareProject.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("ShareProject", __argsBuffer, this.setCallReducerFlags.shareProjectFlags);
  }

  onShareProject(callback: (ctx: ReducerEventContext, projectId: string, userId: string, role: string, canEdit: boolean, canShare: boolean, canDelete: boolean) => void) {
    this.connection.onReducer("ShareProject", callback);
  }

  removeOnShareProject(callback: (ctx: ReducerEventContext, projectId: string, userId: string, role: string, canEdit: boolean, canShare: boolean, canDelete: boolean) => void) {
    this.connection.offReducer("ShareProject", callback);
  }

  updateComponent(id: string, name: string, description: string, content: string, isPublic: boolean, tags: string) {
    const __args = { id, name, description, content, isPublic, tags };
    let __writer = new BinaryWriter(1024);
    UpdateComponent.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("UpdateComponent", __argsBuffer, this.setCallReducerFlags.updateComponentFlags);
  }

  onUpdateComponent(callback: (ctx: ReducerEventContext, id: string, name: string, description: string, content: string, isPublic: boolean, tags: string) => void) {
    this.connection.onReducer("UpdateComponent", callback);
  }

  removeOnUpdateComponent(callback: (ctx: ReducerEventContext, id: string, name: string, description: string, content: string, isPublic: boolean, tags: string) => void) {
    this.connection.offReducer("UpdateComponent", callback);
  }

  updateLastProjectAccess(projectId: string, userId: string) {
    const __args = { projectId, userId };
    let __writer = new BinaryWriter(1024);
    UpdateLastProjectAccess.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("UpdateLastProjectAccess", __argsBuffer, this.setCallReducerFlags.updateLastProjectAccessFlags);
  }

  onUpdateLastProjectAccess(callback: (ctx: ReducerEventContext, projectId: string, userId: string) => void) {
    this.connection.onReducer("UpdateLastProjectAccess", callback);
  }

  removeOnUpdateLastProjectAccess(callback: (ctx: ReducerEventContext, projectId: string, userId: string) => void) {
    this.connection.offReducer("UpdateLastProjectAccess", callback);
  }

  updateProject(id: string, name: string, description: string, content: string, isPublic: boolean, tags: string) {
    const __args = { id, name, description, content, isPublic, tags };
    let __writer = new BinaryWriter(1024);
    UpdateProject.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("UpdateProject", __argsBuffer, this.setCallReducerFlags.updateProjectFlags);
  }

  onUpdateProject(callback: (ctx: ReducerEventContext, id: string, name: string, description: string, content: string, isPublic: boolean, tags: string) => void) {
    this.connection.onReducer("UpdateProject", callback);
  }

  removeOnUpdateProject(callback: (ctx: ReducerEventContext, id: string, name: string, description: string, content: string, isPublic: boolean, tags: string) => void) {
    this.connection.offReducer("UpdateProject", callback);
  }

  updateUserProfile(userId: string, bio: string, profilePictureUrl: string) {
    const __args = { userId, bio, profilePictureUrl };
    let __writer = new BinaryWriter(1024);
    UpdateUserProfile.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("UpdateUserProfile", __argsBuffer, this.setCallReducerFlags.updateUserProfileFlags);
  }

  onUpdateUserProfile(callback: (ctx: ReducerEventContext, userId: string, bio: string, profilePictureUrl: string) => void) {
    this.connection.onReducer("UpdateUserProfile", callback);
  }

  removeOnUpdateUserProfile(callback: (ctx: ReducerEventContext, userId: string, bio: string, profilePictureUrl: string) => void) {
    this.connection.offReducer("UpdateUserProfile", callback);
  }

}

export class SetReducerFlags {
  changePasswordFlags: CallReducerFlags = 'FullUpdate';
  changePassword(flags: CallReducerFlags) {
    this.changePasswordFlags = flags;
  }

  cloneComponentFlags: CallReducerFlags = 'FullUpdate';
  cloneComponent(flags: CallReducerFlags) {
    this.cloneComponentFlags = flags;
  }

  copyUserSettingsFlags: CallReducerFlags = 'FullUpdate';
  copyUserSettings(flags: CallReducerFlags) {
    this.copyUserSettingsFlags = flags;
  }

  createComponentFlags: CallReducerFlags = 'FullUpdate';
  createComponent(flags: CallReducerFlags) {
    this.createComponentFlags = flags;
  }

  createProjectFlags: CallReducerFlags = 'FullUpdate';
  createProject(flags: CallReducerFlags) {
    this.createProjectFlags = flags;
  }

  deactivateUserFlags: CallReducerFlags = 'FullUpdate';
  deactivateUser(flags: CallReducerFlags) {
    this.deactivateUserFlags = flags;
  }

  deleteAllUserSettingsFlags: CallReducerFlags = 'FullUpdate';
  deleteAllUserSettings(flags: CallReducerFlags) {
    this.deleteAllUserSettingsFlags = flags;
  }

  deleteComponentByIdFlags: CallReducerFlags = 'FullUpdate';
  deleteComponentById(flags: CallReducerFlags) {
    this.deleteComponentByIdFlags = flags;
  }

  deleteProjectFlags: CallReducerFlags = 'FullUpdate';
  deleteProject(flags: CallReducerFlags) {
    this.deleteProjectFlags = flags;
  }

  deleteSettingFlags: CallReducerFlags = 'FullUpdate';
  deleteSetting(flags: CallReducerFlags) {
    this.deleteSettingFlags = flags;
  }

  incrementComponentUsageFlags: CallReducerFlags = 'FullUpdate';
  incrementComponentUsage(flags: CallReducerFlags) {
    this.incrementComponentUsageFlags = flags;
  }

  loginUserFlags: CallReducerFlags = 'FullUpdate';
  loginUser(flags: CallReducerFlags) {
    this.loginUserFlags = flags;
  }

  registerUserFlags: CallReducerFlags = 'FullUpdate';
  registerUser(flags: CallReducerFlags) {
    this.registerUserFlags = flags;
  }

  removeUserFromProjectFlags: CallReducerFlags = 'FullUpdate';
  removeUserFromProject(flags: CallReducerFlags) {
    this.removeUserFromProjectFlags = flags;
  }

  setSettingFlags: CallReducerFlags = 'FullUpdate';
  setSetting(flags: CallReducerFlags) {
    this.setSettingFlags = flags;
  }

  shareProjectFlags: CallReducerFlags = 'FullUpdate';
  shareProject(flags: CallReducerFlags) {
    this.shareProjectFlags = flags;
  }

  updateComponentFlags: CallReducerFlags = 'FullUpdate';
  updateComponent(flags: CallReducerFlags) {
    this.updateComponentFlags = flags;
  }

  updateLastProjectAccessFlags: CallReducerFlags = 'FullUpdate';
  updateLastProjectAccess(flags: CallReducerFlags) {
    this.updateLastProjectAccessFlags = flags;
  }

  updateProjectFlags: CallReducerFlags = 'FullUpdate';
  updateProject(flags: CallReducerFlags) {
    this.updateProjectFlags = flags;
  }

  updateUserProfileFlags: CallReducerFlags = 'FullUpdate';
  updateUserProfile(flags: CallReducerFlags) {
    this.updateUserProfileFlags = flags;
  }

}

export class RemoteTables {
  constructor(private connection: DbConnectionImpl) {}

  get component(): ComponentTableHandle {
    return new ComponentTableHandle(this.connection.clientCache.getOrCreateTable<Component>(REMOTE_MODULE.tables.Component));
  }

  get project(): ProjectTableHandle {
    return new ProjectTableHandle(this.connection.clientCache.getOrCreateTable<Project>(REMOTE_MODULE.tables.Project));
  }

  get setting(): SettingTableHandle {
    return new SettingTableHandle(this.connection.clientCache.getOrCreateTable<Setting>(REMOTE_MODULE.tables.Setting));
  }

  get user(): UserTableHandle {
    return new UserTableHandle(this.connection.clientCache.getOrCreateTable<User>(REMOTE_MODULE.tables.User));
  }

  get userProject(): UserProjectTableHandle {
    return new UserProjectTableHandle(this.connection.clientCache.getOrCreateTable<UserProject>(REMOTE_MODULE.tables.UserProject));
  }
}

export class SubscriptionBuilder extends SubscriptionBuilderImpl<RemoteTables, RemoteReducers, SetReducerFlags> { }

export class DbConnection extends DbConnectionImpl<RemoteTables, RemoteReducers, SetReducerFlags> {
  static builder = (): DbConnectionBuilder<DbConnection, ErrorContext, SubscriptionEventContext> => {
    return new DbConnectionBuilder<DbConnection, ErrorContext, SubscriptionEventContext>(REMOTE_MODULE, (imp: DbConnectionImpl) => imp as DbConnection);
  }
  subscriptionBuilder = (): SubscriptionBuilder => {
    return new SubscriptionBuilder(this);
  }
}

export type EventContext = EventContextInterface<RemoteTables, RemoteReducers, SetReducerFlags, Reducer>;
export type ReducerEventContext = ReducerEventContextInterface<RemoteTables, RemoteReducers, SetReducerFlags, Reducer>;
export type SubscriptionEventContext = SubscriptionEventContextInterface<RemoteTables, RemoteReducers, SetReducerFlags>;
export type ErrorContext = ErrorContextInterface<RemoteTables, RemoteReducers, SetReducerFlags>;
